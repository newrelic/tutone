// Code generated by Tutone (https://github.com/newrelic/tutone)
package {{.PackageName | lower}}
{{$packageName := .PackageName}}

{{- if gt (len .Imports) 0 }}
import(
  {{- range .Imports}}
  "{{.}}"
  {{- end}}
)
{{- end}}

{{- range .Resources}}
{{$pkgResourceName := list $packageName .Name | join "" }}
func resource{{$pkgResourceName}}() *schema.Resource {
  return &schema.Resource{
    CreateContext: resource{{$pkgResourceName}}Create,
    ReadContext:   resource{{$pkgResourceName}}Read,
    UpdateContext: resource{{$pkgResourceName}}Update,
    DeleteContext: resource{{$pkgResourceName}}Delete,
    Importer: &schema.ResourceImporter{
      StateContext: schema.ImportStatePassthroughContext,
    },
    Schema: map[string]*schema.Schema{
      {{- range .Attributes }}
        "{{.Key}}": {
          Type: {{.Type}},
          Description: {{.Description | quote}},
          {{- if .Required }}
          Required: true,
          {{- else }}
          Optional: true,
          {{- end }}
        },
        {{- end}}
      },
    }
}

func resource{{$pkgResourceName}}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    providerConfig := meta.(*ProviderConfig)
  	client := providerConfig.NewClient

  	accountID := selectAccountID(providerConfig, d)
  	// TODO:
  	var createInput :=  nerdgraphclient.tmpl
  	created, err := client.pkg.createcontext(ctx,accountID, createInput)
    if err != nil {
        return diag.FromErr(err)
    }

    if created == nil {
        return diag.Errorf("err: {{.Name | snakecase }} create result wasn't returned or not created.")
    }
    d.SetId(created.ID)
    return resource{{$pkgResourceName}}Read(ctx, d, meta)
}

func resource{{$pkgResourceName}}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
    providerConfig := meta.(*ProviderConfig)
  	client := providerConfig.NewClient

  	accountID := selectAccountID(providerConfig, d)

  	// read by get list
  	stateID := d.Id()
  	resp, err := get{{.Name | title}}ByID(ctx, client, accountID, stateID)
    if err != nil && resp == nil {
        d.SetId("")
        return nil
    }

    flatten{{.Name | title }}(resp, d, accountId)
    return nil
}



{{- end}}
